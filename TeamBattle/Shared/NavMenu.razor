@using TeamBattle.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
<AuthorizeView>
    <Authorized>
        <div class="top-row pl-4 navbar navbar-dark">
            <a class="navbar-brand" href="">TeamBattle</a>
            <button class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>

        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <ul class="nav flex-column">
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="gym" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Poki-Gym
                    </NavLink>
                </li>
            </ul>
        </div>
    </Authorized>
</AuthorizeView>
@code
{
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private ApplicationUser _user = new ApplicationUser();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync().ConfigureAwait(false);
        var aUser = authState.User;

        if (aUser.Identity.IsAuthenticated)
        {
            _user = await UserManager.GetUserAsync(aUser).ConfigureAwait(false);
        }
    } 
}
