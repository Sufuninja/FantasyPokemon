@page "/"
@attribute [Authorize]
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.VisualBasic
@using TeamBattle.Data
@using System.Collections
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<h3>ClaimsPrincipal Data</h3>

<button @onclick="GetClaimsPrincipalDataAsync">Get ClaimsPrincipal Data</button>

<p>@_authMessage</p>

@if (_claims.Any())
{
    <ul>
        @foreach (var claim in _claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
}

@if (_battleTeams.Any())
{
    <ul>
        @foreach (var team in _battleTeams)
        {
            <li>@team.Name: @team.Id</li>
            if (team.Members.Any())
            {
                foreach (var member in team.Members)
                {
                    <li>id: @member.Id, pokiApiId: @member.PokiApiId</li>   
                }
            }
        }
    </ul>
}

<p>@_surnameMessage</p>

@code {
    private string _authMessage;
    private string _surnameMessage;
    private ICollection<BattleTeam> _battleTeams = new List<BattleTeam>();
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    private async Task GetClaimsPrincipalDataAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync().ConfigureAwait(false);
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _surnameMessage =
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
            var dbUser = await UserManager.GetUserAsync(user).ConfigureAwait(false);
            _battleTeams =  dbUser.BattleTeams;
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }
}
